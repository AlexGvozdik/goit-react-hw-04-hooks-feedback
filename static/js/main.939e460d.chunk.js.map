{"version":3,"sources":["components/Section/Section.jsx","components/Notification/Notification.jsx","components/FeedBackOpt/FeedBackOpt.jsx","components/Statistics/Statistics.jsx","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","Notification","notice","FeedBackOpt","onLeaveFeedback","btnNames","reset","map","btn","type","name","onClick","Statistics","good","neutral","bad","total","positive","App","useState","setGood","setNeutral","setBad","countTotalFeedback","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAeeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCEQC,EANM,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACnB,OACI,4BAAIA,KCsBGC,EAvBK,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,gBAAgBC,EAAoB,EAApBA,SAASC,EAAW,EAAXA,MAC3C,OACI,qCACKD,EAASE,KAAI,SAAAC,GAAG,OACb,wBAEIC,KAAK,SACLC,KAAMF,EACNG,QAAS,kBAAIP,EAAgBI,IAJjC,SAMKA,GALIA,MAQb,wBAAQG,QAASL,EAAjB,uBCFGM,EAZI,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,KAAKC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,SAC1C,OACI,qCACI,0CAAcJ,EAAd,OACA,6CAAiBC,EAAjB,OACA,yCAAaC,EAAb,OACA,2CAAeC,EAAf,OACA,8CAAkBC,EAAlB,YCDG,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAON,EAAP,KAAaO,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOL,EAAP,KAAgBO,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOJ,EAAP,KAAYO,EAAZ,KAkBMC,EAAqB,WACzB,OAAOV,EAAOC,EAAUC,GAY1B,OACE,qCACE,cAAC,EAAD,CAAShB,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEM,SAVgB,CAAC,OAAO,UAAU,OAWlCD,gBAlCY,SAAAM,GAClB,OAAQA,GACN,IAAK,OACHU,GAAQ,SAAAP,GAAI,OAAIA,EAAO,KACvB,MACF,IAAK,UACHQ,GAAW,SAAAP,GAAO,OAAIA,EAAU,KAChC,MACF,IAAK,MACHQ,GAAO,SAAAP,GAAG,OAAIA,EAAM,KACpB,MACF,QACE,SAuBET,MAXM,WACVc,EAAQ,GACRC,EAAW,GACXC,EAAO,QAWP,cAAC,EAAD,CAASvB,MAAO,aAAhB,SACGwB,IACC,cAAC,EAAD,CACEV,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOO,IACPN,SAxBDO,KAAKC,MAAOZ,EAAOU,IAAwB,OA2B5C,cAAC,EAAD,CAAcrB,OAAQ,2BC5DhC,IAYewB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.939e460d.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nconst Notification = ({notice}) => {\r\n    return (\r\n        <p>{notice}</p>\r\n    );\r\n}\r\n\r\nexport default Notification;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nconst FeedBackOpt = ({onLeaveFeedback,btnNames,reset}) => {\r\n    return (\r\n        <>\r\n            {btnNames.map(btn => (\r\n                <button\r\n                    key={btn}\r\n                    type=\"button\"\r\n                    name={btn}\r\n                    onClick={()=>onLeaveFeedback(btn)}\r\n                >\r\n                    {btn}\r\n                </button>\r\n            ))}\r\n            <button onClick={reset}>Reset</button>\r\n        </>\r\n    );\r\n}\r\n\r\nFeedBackOpt.propTypes = {\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n    btnNames:PropTypes.array.isRequired,\r\n}\r\n\r\nexport default FeedBackOpt;","import React from 'react';\r\nconst Statistics = ({good,neutral, bad, total,positive}) => {\r\n    return (\r\n        <>\r\n            <span>Good: { good} </span>\r\n            <span>Neutral: { neutral} </span>\r\n            <span>Bad: { bad} </span>\r\n            <span>Total: { total} </span>\r\n            <span>Positive: { positive} %</span>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Statistics;","import './App.css';\nimport React, { useState } from 'react'\nimport Section from './components/Section/Section.jsx';\nimport Notification from './components/Notification/Notification';\nimport FeedBackOpt from './components/FeedBackOpt/FeedBackOpt';\nimport Statistics from './components/Statistics/Statistics';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleClick = name => {\n    switch (name) {\n      case 'good':\n        setGood(good => good + 1);\n        break;\n      case 'neutral':\n        setNeutral(neutral => neutral + 1);\n        break;\n      case 'bad':\n        setBad(bad => bad + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n   const countPositiveFeedbackPercentage = () => {\n    return Math.round((good / countTotalFeedback()) * 100);\n  };\n      const arrFeedback = ['good','neutral','bad']\nconst onReset = () => {\n      setGood(0)\n      setNeutral(0)\n      setBad(0)\n    }\n  return (\n    <>\n      <Section title={'Please leave feedback'}>\n        <FeedBackOpt\n          btnNames={arrFeedback}\n          onLeaveFeedback={handleClick}\n          reset={onReset}\n        />\n      </Section>\n      <Section title={'Statistics'}>\n        {countTotalFeedback() ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positive={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification notice={'No feedback given'} />\n        )}\n      </Section>\n    </>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}